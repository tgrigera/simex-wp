<?xml version="1.0" encoding="utf-8"  standalone="no"?>
<svg  onload="if (typeof(gnuplot_svg)!='undefined') gnuplot_svg.Init(evt)" 
 viewBox="0 0 600 480"
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

<title>Gnuplot</title>
<desc>Produced by GNUPLOT 5.4 patchlevel 1 </desc>

<script type="text/javascript" > <![CDATA[
// From:	Marko Karjalainen <markokarjalainen@kolumbus.fi>
// Date:	27 Aug 2018
// Experimental gnuplot plugin for svg
//
// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.
//
// Javascript variables are read from second script tag and converted to json for import to plugin.
// Inline events are removed from xml and new ones are attached with addEventListener function.
// Inline events should be removed from xml and xml should have better id/class names to attach events from js.
//
// Improved mouseover text and image handling
//   content changed to xml only if it really changed and bouncing is calculated once.
//
// Convert functions are same as before, maybe renamed better.
//
// Javascript routines for mouse and keyboard interaction with
// SVG documents produced by gnuplot SVG terminal driver.

// TODO do not create inline events to svg and give id or classes for getting elements
// TODO make own svg layer x/y range sized for coordinates?

if (window) {
    window.addEventListener('load', function () {
        // Find svg elements
        var svg = document.querySelectorAll('svg');
        for (var i = 0; i < svg.length; i++) {
            // Init plugin
            if (!svg[i].gnuplot) {
                // Check if gnuplot generated svg
                if(svg[i].getElementById('gnuplot_canvas')){
                    svg[i].gnuplot = new gnuplot_svg(svg[i]);
                }
            }
        }
    });
}

gnuplot_svg = function (svgElement) {

    var version = '09 April 2019';

    var settings = {};

    var viewBoxResetValue = [];

    var drag = {
        'enabled': false,
        'offset': { 'x': 0, 'y': 0 },
        'change': svgElement.createSVGPoint(),
        'timeout': null
    };

    var coordinateText = {
        'enabled': false,
        'element': svgElement.getElementById('coord_text')
    };

    var popoverContainer = {
        'element': null,
        'content': null,
    };

    var popoverImage = {
        'element': null,
        'content': null,
        'width': 300,
        'height': 200,
        'defaultWidth': 300,
        'defaultHeight': 200,
    };

    var popoverText = {
        'element': null,
        'content': null,
        'width': 11,
        'height': 16,
        'defaultWidth': 11,
        'defaultHeight': 16,
    };

    var point = svgElement.createSVGPoint();

    var axisDate = new Date();

    var gridEnabled = false;

    // Get plot boundaries and axis scaling information for mousing from current object script tag
    // TODO add these to svg xml custom attribute for reading(json format)
    var parseSettings = function () {
        var script = svgElement.querySelectorAll('script');
        if (script && script[1]) {
            var scriptText = script[1].firstChild.nodeValue;
            // Remove inline comments
            scriptText = scriptText.replace(/^\s*\/\/.*\n/g, '');
            // Change prefix to "
            scriptText = scriptText.replace(/gnuplot_svg\./g, '"');
            // Change = to " :
            scriptText = scriptText.replace(/ = /g, '" : ');
            // Change line endings to comma
            scriptText = scriptText.replace(/;\n|\n/g, ',');
            // Remove last comma
            scriptText = scriptText.replace(/,+$/, '');
            // Parse as json string
            settings = JSON.parse("{\n" + scriptText + "\n}");
        }
    };

    // Add interactive events
    var addEvents = function () {
        var i;

        // Get keyentry elements
        var toggleVisibility = svgElement.querySelectorAll('g[id$="_keyentry"]');
        for (i = 0; i < toggleVisibility.length; i++) {
            // ------- Remove inline events
            toggleVisibility[i].removeAttribute('onclick');
            // -------

            // Add keyentry event to toggle visibility
            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));
        }

        // ------- Remove inline events from bounding box
        var boundingBox = svgElement.querySelector('rect[onclick^="gnuplot_svg.toggleCoordBox"]');
        if (boundingBox) {
            boundingBox.removeAttribute('onclick');
            boundingBox.removeAttribute('onmousemove');
        }
        // ------- Remove inline events from canvas
        var canvas = svgElement.getElementById('gnuplot_canvas');
        if (canvas) {
            canvas.removeAttribute('onclick');
            canvas.removeAttribute('onmousemove');
        }
        // -------

        // Get grid image
        var toggleGrid = svgElement.querySelector('image[onclick^="gnuplot_svg.toggleGrid"]');
        if (toggleGrid) {
            // ------- Remove inline events
            toggleGrid.removeAttribute('onclick');
            // -------

            // Add Toggle grid image event
            toggleGrid.addEventListener('click', function (evt) {
                grid();
                evt.preventDefault();
                evt.stopPropagation();
            });
        }

        // Get hypertexts
        var hyperText = svgElement.querySelectorAll('g[onmousemove^="gnuplot_svg.showHypertext"]');

        // Set view element variables
        if (hyperText.length) {
            popoverContainer.element = svgElement.getElementById('hypertextbox');
            popoverText.element = svgElement.getElementById('hypertext');
            popoverImage.element = svgElement.getElementById('hyperimage');
            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');
            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');
        }

        for (i = 0; i < hyperText.length; i++) {
            // Get text from attr uggly way, svg has empty title element
            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);

            // ------- Remove inline events
            hyperText[i].removeAttribute('onmousemove');
            hyperText[i].removeAttribute('onmouseout');
            // -------

            // Add event
            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));
            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));
        }

        // Toggle coordinates visibility on left click on boundingBox element
        svgElement.addEventListener('click', function (evt) {
            if (!drag.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                coordinate();
                setCoordinateLabel(evt);
            }
        });

        // Save move start position, enable drag after delay
        svgElement.addEventListener('mousedown', function (evt) {

            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };

            // Delay for moving, so not move accidentally if only click
            drag.timeout = setTimeout(function () {
                drag.enabled = true;
            }, 250);

            // Cancel draggable
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Disable drag
        svgElement.addEventListener('mouseup', function (evt) {
            drag.enabled = false;
            clearTimeout(drag.timeout);
        });

        // Mouse move
        svgElement.addEventListener('mousemove', function (evt) {

            // Drag svg element
            if (evt.buttons == 1 && drag.enabled) {

                // Position change
                drag.change.x = evt.clientX - drag.offset.x;
                drag.change.y = evt.clientY - drag.offset.y;

                // Set current mouse position
                drag.offset.x = evt.clientX;
                drag.offset.y = evt.clientY;

                // Convert to svg position
                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());

                var viewBoxValues = getViewBox();

                viewBoxValues[0] -= drag.change.x;
                viewBoxValues[1] -= drag.change.y;

                setViewBox(viewBoxValues);
            }

            // View coordinates on mousemove over svg element
            if (coordinateText.enabled) {
                // TODO check if inside data area, own layer for this is needed?
                setCoordinateLabel(evt);
            }

        });

        // Zoom with wheel
        svgElement.addEventListener('wheel', function (evt) {
            // x or y scroll zoom both axels
            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));

            if (delta > 0) {
                setViewBox(zoom('in'));
            }
            else {
                setViewBox(zoom('out'));
            }

            // Disable scroll the entire webpage
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Reset on right click or hold tap
        svgElement.addEventListener('contextmenu', function (evt) {

            setViewBox(viewBoxResetValue);

            // Disable native context menu
            evt.stopPropagation();
            evt.preventDefault();
            return false;
        });

        // Keyboard actions, old svg version not support key events so must listen window
        window.addEventListener('keydown', function (evt) {

            // Not capture event from inputs
            // body = svg inline in page, svg = plain svg file, window = delegated events to object
            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {
                return true;
            }

            var viewBoxValues = [];

            switch (evt.key) {
                // Move, Edge sends without Arrow word
                case 'ArrowLeft':
                case 'Left':
                case 'ArrowRight':
                case 'Right':
                case 'ArrowUp':
                case 'Up':
                case 'ArrowDown':
                case 'Down':
                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());
                    break;
                // Zoom in
                case '+':
                case 'Add':
                    viewBoxValues = zoom('in');
                    break;
                // Zoom out
                case '-':
                case 'Subtract':
                    viewBoxValues = zoom('out');
                    break;
                // Reset
                case 'Home':
                    viewBoxValues = viewBoxResetValue;
                    break;
                // Toggle grid
                case '#':
                    grid();
                    break;
            }

            if (viewBoxValues.length) {
                setViewBox(viewBoxValues);
            }
        });
    };

    // Get svg viewbox details
    var getViewBox = function () {
        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');
        viewBoxValues[0] = parseFloat(viewBoxValues[0]);
        viewBoxValues[1] = parseFloat(viewBoxValues[1]);
        viewBoxValues[2] = parseFloat(viewBoxValues[2]);
        viewBoxValues[3] = parseFloat(viewBoxValues[3]);
        return viewBoxValues;
    };

    // Set svg viewbox details
    var setViewBox = function (viewBoxValues) {
        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));
    };

    // Set coordinate label position and text
    var setCoordinateLabel = function (evt) {
        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });

        // Set coordinate label position
        coordinateText.element.setAttribute('x', position.x);
        coordinateText.element.setAttribute('y', position.y);

        // Convert svg position to plot coordinates
        var plotcoord = convertSVGToPlot(position);

        // Parse label to view
        var label = parseCoordinateLabel(plotcoord);

        // Set coordinate label text
        coordinateText.element.textContent = label.x + ' ' + label.y;
    };

    // Convert position DOM to SVG
    var convertDOMToSVG = function (position) {
        point.x = position.x;
        point.y = position.y;
        return point.matrixTransform(svgElement.getScreenCTM().inverse());
    };

    // Convert position SVG to Plot
    var convertSVGToPlot = function (position) {
        var plotcoord = {};
        var plotx = position.x - settings.plot_xmin;
        var ploty = position.y - settings.plot_ybot;
        var x, y;

        if (settings.plot_logaxis_x !== 0) {
            x = Math.log(settings.plot_axis_xmax)
                - Math.log(settings.plot_axis_xmin);
            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))
                + Math.log(settings.plot_axis_xmin);
            x = Math.exp(x);
        } else {
            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);
        }

        if (settings.plot_logaxis_y !== 0) {
            y = Math.log(settings.plot_axis_ymax)
                - Math.log(settings.plot_axis_ymin);
            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))
                + Math.log(settings.plot_axis_ymin);
            y = Math.exp(y);
        } else {
            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);
        }

        plotcoord.x = x;
        plotcoord.y = y;
        return plotcoord;
    };

    // Parse plot x/y values to label
    var parseCoordinateLabel = function (plotcoord) {
        var label = { 'x': 0, 'y': 0 };

        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {
            if (settings.plot_timeaxis_x == 'DMS') {
                label.x = convertToDMS(plotcoord.x);
            }
            else {
                label.x = plotcoord.x.toFixed(2);
            }

            if (settings.plot_timeaxis_y == 'DMS') {
                label.y = convertToDMS(plotcoord.y);
            }
            else {
                label.y = plotcoord.y.toFixed(2);
            }

        } else if (settings.polar_mode) {
            polar = convertToPolar(plotcoord.x, plotcoord.y);
            label.x = 'ang= ' + polar.ang.toPrecision(4);
            label.y = 'R= ' + polar.r.toPrecision(4);

        } else if (settings.plot_timeaxis_x == 'Date') {
            axisDate.setTime(1000 * plotcoord.x);
            var year = axisDate.getUTCFullYear();
            var month = axisDate.getUTCMonth();
            var date = axisDate.getUTCDate();
            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'Time') {
            axisDate.setTime(1000 * plotcoord.x);
            var hour = axisDate.getUTCHours();
            var minute = axisDate.getUTCMinutes();
            var second = axisDate.getUTCSeconds();
            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);
            label.y = plotcoord.y.toFixed(2);
        } else if (settings.plot_timeaxis_x == 'DateTime') {
            axisDate.setTime(1000 * plotcoord.x);
            label.x = axisDate.toUTCString();
            label.y = plotcoord.y.toFixed(2);
        } else {
            label.x = plotcoord.x.toFixed(2);
            label.y = plotcoord.y.toFixed(2);
        }

        return label;
    };

    // Convert position to Polar
    var convertToPolar = function (x, y) {
        polar = {};
        var phi, r;
        phi = Math.atan2(y, x);
        if (settings.plot_logaxis_r) {
            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);
        }
        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {
            r = settings.plot_axis_rmin - x / Math.cos(phi);
        } else {
            r = settings.plot_axis_rmin + x / Math.cos(phi);
        }
        phi = phi * (180 / Math.PI);
        if (settings.polar_sense < 0) {
            phi = -phi;
        }
        if (settings.polar_theta0 !== undefined) {
            phi = phi + settings.polar_theta0;
        }
        if (phi > 180) { phi = phi - 360; }
        polar.r = r;
        polar.ang = phi;
        return polar;
    };

    // Convert position to DMS
    var convertToDMS = function (x) {
        var dms = { d: 0, m: 0, s: 0 };
        var deg = Math.abs(x);
        dms.d = Math.floor(deg);
        dms.m = Math.floor((deg - dms.d) * 60);
        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);
        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '"' + dms.s.toFixed(0) + "'";
        return fmt;
    };

    // Set popover text to show
    var setPopoverText = function (content) {

        // Minimum length
        popoverText.width = popoverText.defaultWidth;

        // Remove old texts
        while (null !== popoverText.element.firstChild) {
            popoverText.element.removeChild(popoverText.element.firstChild);
        }

        var lines = content.split(/\n|\\n/g);

        // Single line
        if (lines.length <= 1) {
            popoverText.element.textContent = content;
            popoverText.width = popoverText.element.getComputedTextLength() + 8;
        }
        // Multiple lines
        else {
            var lineWidth = 0;
            var tspanElement;

            for (var l = 0; l < lines.length; l++) {
                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                // Y relative position
                if (l > 0) {
                    tspanElement.setAttribute('dy', popoverText.defaultHeight);
                }
                // Append text
                tspanElement.appendChild(document.createTextNode(lines[l]));
                popoverText.element.appendChild(tspanElement);

                // Max line width
                lineWidth = tspanElement.getComputedTextLength() + 8;
                if (popoverText.width < lineWidth) {
                    popoverText.width = lineWidth;
                }
            }
        }

        // Box Height
        popoverText.height = 2 + popoverText.defaultHeight * lines.length;
        popoverContainer.element.setAttribute('height', popoverText.height);

        // Box Width
        popoverContainer.element.setAttribute('width', popoverText.width);
    };

    // Set popover image to show
    var setPopoverImage = function (content) {

        // Set default image size
        popoverImage.width = popoverImage.defaultWidth;
        popoverImage.height = popoverImage.defaultHeight;

        // Pick up height and width from image(width,height):name
        if (content.charAt(5) == '(') {
            popoverImage.width = parseInt(content.slice(6));
            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));
        }

        popoverImage.element.setAttribute('width', popoverImage.width);
        popoverImage.element.setAttribute('height', popoverImage.height);
        popoverImage.element.setAttribute('preserveAspectRatio', 'none');

        // attach image URL as a link
        content = content.slice(content.indexOf(':') + 1);
        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);
    };

    // Show popover text in given position
    var showPopoverText = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverText.height + 16 > domRect.y) {
            position.y = domRect.y - popoverText.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverText.width + 14 > domRect.x) {
            position.x = domRect.x - popoverText.width - 14;
        }

        // Change Box position
        popoverContainer.element.setAttribute('x', position.x + 10);
        popoverContainer.element.setAttribute('y', position.y + 4);
        popoverContainer.element.setAttribute('visibility', 'visible');

        // Change Text position
        popoverText.element.setAttribute('x', position.x + 14);
        popoverText.element.setAttribute('y', position.y + 18);
        popoverText.element.setAttribute('visibility', 'visible');

        // Change multiline text position
        var tspan = popoverText.element.querySelectorAll('tspan');
        for (var i = 0; i < tspan.length; i++) {
            tspan[i].setAttribute('x', position.x + 14);
        }

        // Font properties
        if (settings.hypertext_fontFamily != null)
            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);
        if (settings.hypertext_fontStyle != null)
            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);
        if (settings.hypertext_fontWeight != null)
            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);
        if (settings.hypertext_fontSize > 0)
            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);
    };

    // Show popover image in given position
    var showPopoverImage = function (position) {
        var domRect = svgElement.getBoundingClientRect();
        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });

        // bounce off frame bottom
        if (position.y + popoverImage.height + 16 > domRect.y) {
            position.y = domRect.y - popoverImage.height - 16;
        }

        // bounce off right edge
        if (position.x + popoverImage.width + 14 > domRect.x) {
            position.x = domRect.x - popoverImage.width - 14;
        }

        popoverImage.element.setAttribute('x', position.x);
        popoverImage.element.setAttribute('y', position.y);
        popoverImage.element.setAttribute('visibility', 'visible');
    };

    // Hide all popovers
    var hidePopover = function () {
        popoverContainer.element.setAttribute('visibility', 'hidden');
        popoverText.element.setAttribute('visibility', 'hidden');
        popoverImage.element.setAttribute('visibility', 'hidden');
    };

    // Zoom svg inside viewbox
    var zoom = function (direction) {
        var zoomRate = 1.1;
        var viewBoxValues = getViewBox();

        var widthBefore = viewBoxValues[2];
        var heightBefore = viewBoxValues[3];

        if (direction == 'in') {
            viewBoxValues[2] /= zoomRate;
            viewBoxValues[3] /= zoomRate;
            // Pan to center
            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;
            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;
        }
        else if (direction == 'out') {
            viewBoxValues[2] *= zoomRate;
            viewBoxValues[3] *= zoomRate;
            // Pan to center
            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;
            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;
        }

        return viewBoxValues;
    };

    // Pan svg inside viewbox
    var pan = function (direction) {
        var panRate = 10;
        var viewBoxValues = getViewBox();

        switch (direction) {
            case 'left':
                viewBoxValues[0] += panRate;
                break;
            case 'right':
                viewBoxValues[0] -= panRate;
                break;
            case 'up':
                viewBoxValues[1] += panRate;
                break;
            case 'down':
                viewBoxValues[1] -= panRate;
                break;
        }

        return viewBoxValues;
    };

    // Toggle key and chart on/off or set manually to wanted
    var key = function (id, set, evt) {
        var visibility = null;

        // Chart element
        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));
        if (chartElement) {
            // Set on/off
            if (set === true || set === false) {
                visibility = set ? 'visible' : 'hidden';
            }
            // Toggle
            else {
                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';
            }
            chartElement.setAttribute('visibility', visibility);
        }

        // Key element
        var keyElement = svgElement.getElementById(id);
        if (keyElement && visibility) {
            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Toggle coordinates on/off or set manually to wanted
    var coordinate = function (set) {
        if (coordinateText.element) {
            // Set on/off
            if (set === true || set === false) {
                coordinateText.enabled = set;
            }
            // Toggle
            else {
                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;
            }
            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');
        }
    };

    // Toggle grid on/off or set manually to wanted
    var grid = function (set) {
        var grid = svgElement.getElementsByClassName('gridline');

        // Set on/off
        if (set === true || set === false) {
            gridEnabled = set;
        }
        // Toggle, get state from first element
        else if (grid.length) {
            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;
        }

        for (i = 0; i < grid.length; i++) {
            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');
        }
    };

    // Show popover text or image
    var popover = function (content, set, evt) {

        // Hide popover
        if (set === false) {
            hidePopover();

            if (evt !== undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            return;
        }

        var position = null;

        // Change content only if changed
        if (popoverContainer.content != content) {

            // Set current text
            popoverContainer.content = content;

            popoverImage.content = '';
            popoverText.content = content;

            // If text starts with image: process it as an xlinked bitmap
            if (content.substring(0, 5) == 'image') {
                var lines = content.split(/\n|\\n/g);
                var nameindex = lines[0].indexOf(':');
                if (nameindex > 0) {
                    popoverImage.content = lines.shift();
                    popoverText.content = '';

                    // Additional text lines
                    if (lines !== undefined && lines.length > 0) {
                        popoverText.content = lines.join('\n');
                    }
                }
            }

            // Set image content
            if(popoverImage.content){
                setPopoverImage(popoverImage.content);
            }

            // Set text content
            if(popoverText.content){
                setPopoverText(popoverText.content);
            }
        }

        if(popoverImage.content || popoverText.content){
            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });
        }

        // Show popover image on mouse position
        if(popoverImage.content){
            showPopoverImage(position);
        }

        // Show popover on mouse position
        if(popoverText.content){
            showPopoverText(position);
        }

        if (evt !== undefined) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    // Parse plot settings
    parseSettings();

    // viewBox initial position and size
    viewBoxResetValue = getViewBox();

    // Set focusable for event focusing, not work on old svg version
    svgElement.setAttribute('focusable', true);

    // Disable native draggable
    svgElement.setAttribute('draggable', false);

    // Add events
    addEvents();

    // Return functions to outside use
    return {
        zoom: function (direction) {
            setViewBox(zoom(direction));
            return this;
        },
        pan: function (direction) {
            setViewBox(pan(direction));
            return this;
        },
        reset: function () {
            setViewBox(viewBoxResetValue);
            return this;
        },
        key: function (id, set) {
            key(id, set);
            return this;
        },
        coordinate: function (set) {
            coordinate(set);
            return this;
        },
        grid: function (set) {
            grid(set);
            return this;
        }
    };
};

// Old init function, remove when svg inline events removed
gnuplot_svg.Init = function() { };
]]>
</script>

<!-- Tie mousing to entire bounding box of the plot -->
<rect x="0" y="0" width="600" height="480" fill="#ffffff" stroke="black" stroke-width="1"
onclick="gnuplot_svg.toggleCoordBox(evt)"  onmousemove="gnuplot_svg.moveCoordBox(evt)"/>

<!-- Also track mouse when it is on a plot element -->
<g id="gnuplot_canvas" onclick="gnuplot_svg.toggleCoordBox(evt)" onmousemove="gnuplot_svg.moveCoordBox(evt)">

<defs>

	<circle id='gpDot' r='0.5' stroke-width='0.5' stroke='currentColor'/>
	<path id='gpPt0' stroke-width='0.222' stroke='currentColor' d='M-1,0 h2 M0,-1 v2'/>
	<path id='gpPt1' stroke-width='0.222' stroke='currentColor' d='M-1,-1 L1,1 M1,-1 L-1,1'/>
	<path id='gpPt2' stroke-width='0.222' stroke='currentColor' d='M-1,0 L1,0 M0,-1 L0,1 M-1,-1 L1,1 M-1,1 L1,-1'/>
	<rect id='gpPt3' stroke-width='0.222' stroke='currentColor' x='-1' y='-1' width='2' height='2'/>
	<rect id='gpPt4' stroke-width='0.222' stroke='currentColor' fill='currentColor' x='-1' y='-1' width='2' height='2'/>
	<circle id='gpPt5' stroke-width='0.222' stroke='currentColor' cx='0' cy='0' r='1'/>
	<use xlink:href='#gpPt5' id='gpPt6' fill='currentColor' stroke='none'/>
	<path id='gpPt7' stroke-width='0.222' stroke='currentColor' d='M0,-1.33 L-1.33,0.67 L1.33,0.67 z'/>
	<use xlink:href='#gpPt7' id='gpPt8' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt7' id='gpPt9' stroke='currentColor' transform='rotate(180)'/>
	<use xlink:href='#gpPt9' id='gpPt10' fill='currentColor' stroke='none'/>
	<use xlink:href='#gpPt3' id='gpPt11' stroke='currentColor' transform='rotate(45)'/>
	<use xlink:href='#gpPt11' id='gpPt12' fill='currentColor' stroke='none'/>
	<path id='gpPt13' stroke-width='0.222' stroke='currentColor' d='M0,1.330 L1.265,0.411 L0.782,-1.067 L-0.782,-1.076 L-1.265,0.411 z'/>
	<use xlink:href='#gpPt13' id='gpPt14' fill='currentColor' stroke='none'/>
	<filter id='textbox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='#FFFFFF' flood-opacity='1' result='bgnd'/>
	  <feComposite in='SourceGraphic' in2='bgnd' operator='atop'/>
	</filter>
	<filter id='greybox' filterUnits='objectBoundingBox' x='0' y='0' height='1' width='1'>
	  <feFlood flood-color='lightgrey' flood-opacity='1' result='grey'/>
	  <feComposite in='SourceGraphic' in2='grey' operator='atop'/>
	</filter>
</defs>
<g fill="none" color="#FFFFFF" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,444.00 L55.14,444.00 M574.82,444.00 L565.82,444.00  '/>	<g transform="translate(37.75,447.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 0</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,396.67 L55.14,396.67 M574.82,396.67 L565.82,396.67  '/>	<g transform="translate(37.75,400.57)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 2</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,349.34 L55.14,349.34 M574.82,349.34 L565.82,349.34  '/>	<g transform="translate(37.75,353.24)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 4</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,302.00 L55.14,302.00 M574.82,302.00 L565.82,302.00  '/>	<g transform="translate(37.75,305.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 6</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,254.67 L55.14,254.67 M574.82,254.67 L565.82,254.67  '/>	<g transform="translate(37.75,258.57)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 8</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,207.34 L55.14,207.34 M574.82,207.34 L565.82,207.34  '/>	<g transform="translate(37.75,211.24)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 10</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,160.01 L55.14,160.01 M574.82,160.01 L565.82,160.01  '/>	<g transform="translate(37.75,163.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 12</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,112.67 L55.14,112.67 M574.82,112.67 L565.82,112.67  '/>	<g transform="translate(37.75,116.57)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 14</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,65.34 L55.14,65.34 M574.82,65.34 L565.82,65.34  '/>	<g transform="translate(37.75,69.24)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 16</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,18.01 L55.14,18.01 M574.82,18.01 L565.82,18.01  '/>	<g transform="translate(37.75,21.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text><tspan font-family="Arial" > 18</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,444.00 L46.14,435.00 M46.14,18.01 L46.14,27.01  '/>	<g transform="translate(46.14,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.94</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M134.25,444.00 L134.25,435.00 M134.25,18.01 L134.25,27.01  '/>	<g transform="translate(134.25,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.96</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M222.37,444.00 L222.37,435.00 M222.37,18.01 L222.37,27.01  '/>	<g transform="translate(222.37,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 0.98</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M310.48,444.00 L310.48,435.00 M310.48,18.01 L310.48,27.01  '/>	<g transform="translate(310.48,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M398.59,444.00 L398.59,435.00 M398.59,18.01 L398.59,27.01  '/>	<g transform="translate(398.59,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1.02</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M486.71,444.00 L486.71,435.00 M486.71,18.01 L486.71,27.01  '/>	<g transform="translate(486.71,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1.04</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M574.82,444.00 L574.82,435.00 M574.82,18.01 L574.82,27.01  '/>	<g transform="translate(574.82,465.90)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="middle">
		<text><tspan font-family="Arial" > 1.06</tspan></text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,18.01 L46.14,444.00 L574.82,444.00 L574.82,18.01 L46.14,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
	<g id="gnuplot_plot_1" ><title>$data1</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<g transform="translate(507.09,39.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text>$data1</text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	</g>
	<use xlink:href='#gpPt0' transform='translate(46.98,425.30) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(48.65,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(50.32,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(52.00,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(53.67,419.07) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(55.34,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(57.01,425.30) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(58.69,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(60.36,400.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(62.03,419.07) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(63.71,387.91) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(65.38,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(67.05,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(68.73,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(70.40,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(72.07,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(73.75,431.54) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(75.42,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(77.09,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(78.76,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(80.44,400.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(82.11,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(83.78,419.07) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(85.46,425.30) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(87.13,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(88.80,419.07) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(90.48,400.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(92.15,400.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(93.82,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(95.49,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(97.17,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(98.84,369.22) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(100.51,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(102.19,350.52) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(103.86,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(105.53,369.22) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(107.21,412.84) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(108.88,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(110.55,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(112.22,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(113.90,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(115.57,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(117.24,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(118.92,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(120.59,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(122.26,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(123.94,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(125.61,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(127.28,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(128.96,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(130.63,350.52) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(132.30,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(133.97,338.05) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(135.65,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(137.32,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(138.99,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(140.67,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(142.34,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(144.01,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(145.69,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(147.36,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(149.03,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(150.70,325.59) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(152.38,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(154.05,356.75) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(155.72,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(157.40,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(159.07,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(160.74,300.66) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(162.42,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(164.09,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(165.76,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(167.44,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(169.11,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(170.78,300.66) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(172.45,313.13) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(174.13,313.13) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(175.80,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(177.47,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(179.15,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(180.82,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(182.49,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(184.17,325.59) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(185.84,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(187.51,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(189.18,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(190.86,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(192.53,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(194.20,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(195.88,238.34) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(197.55,151.09) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(199.22,269.50) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(200.90,232.11) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(202.57,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(204.24,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(205.92,244.57) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(207.59,263.27) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(209.26,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(210.93,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(212.61,244.57) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(214.28,300.66) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(215.95,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(217.63,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(219.30,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(220.97,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(222.65,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(224.32,269.50) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(225.99,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(227.66,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(229.34,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(231.01,238.34) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(232.68,244.57) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(234.36,207.18) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(236.03,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(237.70,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(239.38,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(241.05,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(242.72,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(244.39,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(246.07,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(247.74,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(249.41,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(251.09,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(252.76,132.40) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(254.43,182.25) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(256.11,132.40) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(257.78,225.88) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(259.45,169.79) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(261.13,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(262.80,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(264.47,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(266.14,151.09) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(267.82,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(269.49,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(271.16,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(272.84,157.32) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(274.51,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(276.18,132.40) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(277.86,119.93) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(279.53,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(281.20,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(282.87,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(284.55,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(286.22,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(287.89,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(289.57,169.79) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(291.24,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(292.91,182.25) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(294.59,151.09) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(296.26,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(297.93,70.08) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(299.61,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(301.28,51.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(302.95,126.16) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(304.62,113.70) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(306.30,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(307.97,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(309.64,132.40) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(311.32,225.88) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(312.99,132.40) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(314.66,51.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(316.34,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(318.01,76.31) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(319.68,113.70) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(321.35,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(323.03,76.31) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(324.70,119.93) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(326.37,107.47) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(328.05,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(329.72,107.47) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(331.39,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(333.07,113.70) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(334.74,88.77) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(336.41,151.09) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(338.09,107.47) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(339.76,119.93) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(341.43,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(343.10,163.56) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(344.78,113.70) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(346.45,95.00) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(348.12,107.47) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(349.80,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(351.47,95.00) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(353.14,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(354.82,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(356.49,163.56) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(358.16,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(359.83,126.16) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(361.51,163.56) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(363.18,126.16) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(364.85,144.86) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(366.53,157.32) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(368.20,76.31) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(369.87,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(371.55,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(373.22,107.47) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(374.89,194.72) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(376.56,163.56) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(378.24,207.18) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(379.91,207.18) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(381.58,82.54) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(383.26,88.77) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(384.93,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(386.60,207.18) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(388.28,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(389.95,157.32) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(391.62,45.15) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(393.30,225.88) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(394.97,176.02) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(396.64,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(398.31,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(399.99,82.54) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(401.66,157.32) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(403.33,95.00) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(405.01,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(406.68,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(408.35,101.24) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(410.03,157.32) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(411.70,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(413.37,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(415.04,169.79) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(416.72,126.16) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(418.39,169.79) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(420.06,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(421.74,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(423.41,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(425.08,207.18) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(426.76,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(428.43,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(430.10,138.63) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(431.78,169.79) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(433.45,182.25) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(435.12,200.95) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(436.79,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(438.47,119.93) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(440.14,232.11) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(441.81,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(443.49,232.11) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(445.16,182.25) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(446.83,244.57) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(448.51,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(450.18,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(451.85,182.25) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(453.52,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(455.20,213.41) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(456.87,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(458.54,238.34) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(460.22,263.27) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(461.89,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(463.56,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(465.24,232.11) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(466.91,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(468.58,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(470.26,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(471.93,313.13) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(473.60,275.73) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(475.27,263.27) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(476.95,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(478.62,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(480.29,188.48) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(481.97,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(483.64,219.65) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(485.31,250.81) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(486.99,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(488.66,263.27) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(490.33,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(492.00,300.66) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(493.68,300.66) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(495.35,257.04) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(497.02,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(498.70,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(500.37,313.13) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(502.04,338.05) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(503.72,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(505.39,350.52) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(507.06,288.20) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(508.73,244.57) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(510.41,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(512.08,281.97) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(513.75,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(515.43,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(517.10,331.82) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(518.77,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(520.45,325.59) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(522.12,319.36) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(523.79,325.59) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(525.47,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(527.14,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(528.81,356.75) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(530.48,338.05) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(532.16,294.43) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(533.83,325.59) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(535.50,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(537.18,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(538.85,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(540.52,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(542.20,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(543.87,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(545.54,400.38) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(547.21,369.22) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(548.89,338.05) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(550.56,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(552.23,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(553.91,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(555.58,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(557.25,387.91) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(558.93,306.89) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(560.60,338.05) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(562.27,344.29) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(563.95,375.45) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(565.62,394.14) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(567.29,356.75) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(568.96,362.98) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(570.64,381.68) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(572.31,406.61) scale(4.50)' color='rgb(148,   0, 211)'/>
	<use xlink:href='#gpPt0' transform='translate(573.98,425.30) scale(4.50)' color='rgb(148,   0, 211)'/>
	<g id="gnuplot_plot_1_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_1')">
	<use xlink:href='#gpPt0' transform='translate(536.76,36.01) scale(4.50)' color='rgb(148,   0, 211)'/>
	</g>
</g>
	</g>
	<g id="gnuplot_plot_2" ><title>exp(-(x-1.0060330386756748)**2/(2*0.0009))/(sqrt(2*pi)*0.03)</title>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<g id="gnuplot_plot_2_keyentry" visibility="visible" onclick="gnuplot_svg.toggleVisibility(evt,'gnuplot_plot_2')">
	<g transform="translate(507.09,57.91)" stroke="none" fill="black" font-family="Arial" font-size="12.00"  text-anchor="end">
		<text>exp(-(x-1.0060330386756748)**2/(2*0.0009))/(sqrt(2*pi)*0.03)</text>
	</g>
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='rgb(  0, 158, 115)'  d='M515.48,54.01 L558.04,54.01  '/>	</g>
	<path stroke='rgb(  0, 158, 115)'  d='M46.98,415.69 L52.30,413.10 L57.62,410.33 L62.95,407.36 L68.27,404.20 L73.59,400.84 L78.92,397.27 L84.24,393.49
		L89.56,389.49 L94.89,385.27 L100.21,380.82 L105.53,376.14 L110.86,371.24 L116.18,366.11 L121.50,360.76 L126.83,355.18
		L132.15,349.38 L137.47,343.37 L142.80,337.14 L148.12,330.72 L153.44,324.10 L158.77,317.30 L164.09,310.34 L169.41,303.22
		L174.74,295.96 L180.06,288.58 L185.38,281.09 L190.71,273.52 L196.03,265.89 L201.35,258.22 L206.68,250.54 L212.00,242.86
		L217.32,235.22 L222.65,227.63 L227.97,220.14 L233.29,212.76 L238.62,205.52 L243.94,198.46 L249.26,191.60 L254.59,184.96
		L259.91,178.58 L265.23,172.49 L270.56,166.71 L275.88,161.26 L281.20,156.17 L286.53,151.47 L291.85,147.17 L297.17,143.30
		L302.50,139.87 L307.82,136.89 L313.14,134.40 L318.46,132.39 L323.79,130.87 L329.11,129.85 L334.43,129.35 L339.76,129.35
		L345.08,129.87 L350.40,130.89 L355.73,132.41 L361.05,134.43 L366.37,136.93 L371.70,139.91 L377.02,143.35 L382.34,147.23
		L387.67,151.53 L392.99,156.24 L398.31,161.33 L403.64,166.79 L408.96,172.57 L414.28,178.67 L419.61,185.05 L424.93,191.69
		L430.25,198.56 L435.58,205.62 L440.90,212.86 L446.22,220.24 L451.55,227.74 L456.87,235.32 L462.19,242.97 L467.52,250.64
		L472.84,258.33 L478.16,266.00 L483.49,273.63 L488.81,281.20 L494.13,288.68 L499.46,296.06 L504.78,303.32 L510.10,310.43
		L515.43,317.40 L520.75,324.19 L526.07,330.81 L531.40,337.23 L536.72,343.45 L542.04,349.46 L547.37,355.26 L552.69,360.84
		L558.01,366.19 L563.34,371.31 L568.66,376.21 L573.98,380.88  '/></g>
	</g>
<g fill="none" color="#FFFFFF" stroke="rgb(  0, 158, 115)" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="2.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="black" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
	<path stroke='black'  d='M46.14,18.01 L46.14,444.00 L574.82,444.00 L574.82,18.01 L46.14,18.01 Z  '/></g>
<g fill="none" color="black" stroke="currentColor" stroke-width="1.00" stroke-linecap="butt" stroke-linejoin="miter">
</g>

<script type="text/javascript"><![CDATA[
// plot boundaries and axis scaling information for mousing 
gnuplot_svg.plot_term_xmax = 600;
gnuplot_svg.plot_term_ymax = 480;
gnuplot_svg.plot_xmin = 46.1;
gnuplot_svg.plot_xmax = 574.8;
gnuplot_svg.plot_ybot = 444.0;
gnuplot_svg.plot_ytop = 18.0;
gnuplot_svg.plot_width = 528.7;
gnuplot_svg.plot_height = 426.0;
gnuplot_svg.plot_axis_xmin = 0.94;
gnuplot_svg.plot_axis_xmax = 1.06;
gnuplot_svg.plot_axis_ymin = 0;
gnuplot_svg.plot_axis_ymax = 18;
gnuplot_svg.polar_mode = false;
gnuplot_svg.plot_axis_x2min = "none";
gnuplot_svg.plot_axis_y2min = "none";
gnuplot_svg.plot_logaxis_x = 0;
gnuplot_svg.plot_logaxis_y = 0;
gnuplot_svg.plot_timeaxis_x = "";
gnuplot_svg.plot_timeaxis_y = "";
gnuplot_svg.hypertext_fontSize = 0;
gnuplot_svg.hypertext_fontName = null;
gnuplot_svg.hypertext_fontStyle = null;
gnuplot_svg.hypertext_fontWeight = null;
]]>
</script>
</g>

  <text id="coord_text" text-anchor="start" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <rect id="hypertextbox" class="hypertextbox" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="16" visibility="hidden" />

  <text id="hypertext" class="hypertext" pointer-events="none"
  font-size="12" font-family="Arial"
  visibility="hidden"> </text>

  <image id="hyperimage" class="hyperimage" pointer-events="none"
  fill="white" stroke="black" opacity="0.8"
  height="200" width="300" visibility="hidden" />
</svg>

